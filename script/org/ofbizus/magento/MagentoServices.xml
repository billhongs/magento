<?xml version="1.0" encoding="UTF-8"?>
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="receiveInventoryProduct" short-description="Receive Inventory in new Inventory Item(s)">
        <!-- NOTES
            - for serialized items with a serial number passed in: the quantityAccepted _should_ always be 1
            - if the type is SERIALIZED_INV_ITEM but there is not serial number (which is weird...) we'll create a bunch of individual InventoryItems
            - DEJ20070822: something to consider for the future: maybe instead of this funny looping maybe for serialized items we should only allow a quantity of 1, ie return an error if it is not 1
        -->
        <if-empty field="parameters.quantityAccepted">
            <add-error><fail-property resource="MagentoUiLabels" property="MagentoPleaseEnterQuantity"/></add-error>
        </if-empty>
        <if>
            <condition>
                <and>
                    <or>
                        <if-compare field="parameters.quantityAccepted" operator="less-equals" value="0"></if-compare>
                    </or>
                    <or>
                        <if-empty field="parameters.quantityRejected"></if-empty>
                        <if-compare field="parameters.quantityRejected" operator="less-equals" value="0"></if-compare>
                    </or>
                </and>
            </condition>
            <then>
                <add-error><fail-property resource="MagentoUiLabels" property="MagentoQtyRecRejCanNotBeZero"/></add-error>
            </then>
        </if>
        <if-empty field="parameters.locationSeqId">
            <add-error><fail-property resource="MagentoUiLabels" property="MagentoPleaseEnterFacilityLocation"/></add-error>
        </if-empty>
        <set field="loops" value="1" type="Double"/>
        <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field="parameters.inventoryItemTypeId">
            <!-- if we are serialized and either a serialNumber or inventoyItemId is passed in and the quantityAccepted is greater than 1 then complain -->
            <if>
                <condition>
                    <and>
                        <or>
                            <not><if-empty field="parameters.serialNumber"/></not>
                            <not><if-empty field="parameters.currentInventoryItemId"/></not>
                        </or>
                        <if-compare field="parameters.quantityAccepted" operator="greater" value="1" type="BigDecimal"/>
                    </and>
                </condition>
                <then>
                    <add-error><fail-message message="Tried to receive a serialized inventory item with serialNumber [${parameters.serialNumber}] or inventoryItemId [${parameters.currentInventoryItemId}] passed in and quantityAccepted [${parameters.quantityAccepted}] was greater than 1; we don't know what to do with that!"/></add-error>
                </then>
            </if>

            <set field="loops" from-field="parameters.quantityAccepted"/>
            <set field="parameters.quantityAccepted" value="1" type="BigDecimal"/>
        </if-compare>

        <set field="parameters.quantityOnHandDiff" from-field="parameters.quantityAccepted"/>
        <set field="parameters.availableToPromiseDiff" from-field="parameters.quantityAccepted"/>

        <!-- before getting going, see if there are any validation issues so far -->
        <check-errors/>

        <!-- Status for Non serialized and Serialized inventory are different, lets make sure correct status is stored in database -->
        <if-compare field="parameters.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
            <if-compare field="parameters.statusId" operator="equals" value="INV_DEFECTIVE"><!-- This status may come from the Receive Return Screen -->
                <set field="parameters.statusId" value="INV_NS_DEFECTIVE"/>
            <else>
                <if-compare field="parameters.statusId" operator="equals" value="INV_ON_HOLD">
                    <set field="parameters.statusId" value="INV_NS_ON_HOLD"/>
                </if-compare>
            </else>
            </if-compare>
            <!-- Any other status should be just set to null, if it is not a valid status for Non Serialized inventory -->
            <if>
                <condition>
                    <and>
                        <not><if-compare field="parameters.statusId" operator="equals" value="INV_NS_DEFECTIVE"/></not>
                        <not><if-compare field="parameters.statusId" operator="equals" value="INV_NS_ON_HOLD"/></not>
                    </and>
                </condition>
                <then>
                    <set field="parameters.statusId" from-field="nullField"/>
                </then>
            </if>
        </if-compare>

        <loop count="${loops}" field="currentLoop">
            <log level="info" message="receiveInventoryProduct Looping and creating inventory info - ${currentLoop}"/>

            <!-- if there is an inventoryItemId, update it (this will happen when receiving serialized inventory already in the system, like for returns); if not create one -->
            <clear-field field="serviceInMap"/>
            <clear-field field="currentInventoryItemId"/>

            <!-- Set supplier partyId, if inventory received by purchase order -->
            <if-not-empty field="parameters.orderId">
                <entity-and entity-name="OrderRole" list="orderRoles">
                    <field-map field-name="orderId" from-field="parameters.orderId"/>
                    <field-map field-name="roleTypeId" value="SUPPLIER_AGENT"/>
                </entity-and>
                <if-not-empty field="orderRoles">
                    <first-from-list list="orderRoles" entry="orderRole"/>
                    <set field="parameters.partyId" from-field="orderRole.partyId"/>
                </if-not-empty>
            </if-not-empty>

            <if-empty field="parameters.currentInventoryItemId">
                <set-service-fields service-name="createInventoryItem" map="parameters" to-map="serviceInMap"/>
                <call-service service-name="createInventoryItem" in-map-name="serviceInMap">
                    <result-to-field result-name="inventoryItemId" field="currentInventoryItemId"/>
                </call-service>

                <else>
                    <if-not-empty field="parameters.currentInventoryItemId">
                        <set field="parameters.inventoryItemId" from-field="parameters.currentInventoryItemId"/>
                    </if-not-empty>
                    <set-service-fields service-name="updateInventoryItem" map="parameters" to-map="serviceInMap"/>
                    <call-service service-name="updateInventoryItem" in-map-name="serviceInMap"/>
                    <set field="currentInventoryItemId" from-field="parameters.currentInventoryItemId"/>
                </else>
            </if-empty>

            <!-- do this only for non-serialized inventory -->
            <if-compare value="SERIALIZED_INV_ITEM" operator="not-equals" field="parameters.inventoryItemTypeId">
                <clear-field field="serviceInMap"/>
                <set-service-fields service-name="createInventoryItemDetail" map="parameters" to-map="serviceInMap"/>
                <set field="serviceInMap.inventoryItemId" from-field="currentInventoryItemId"/>
                <call-service service-name="createInventoryItemDetail" in-map-name="serviceInMap">
                    <result-to-field result-name="inventoryItemDetailSeqId" field="parameters.inventoryItemDetailSeqId"/>
                </call-service>
            </if-compare>

            <clear-field field="serviceInMap"/>
            <set-service-fields service-name="createShipmentReceipt" map="parameters" to-map="serviceInMap"/>
            <set field="serviceInMap.inventoryItemId" from-field="currentInventoryItemId"/>
            <call-service service-name="createShipmentReceipt" in-map-name="serviceInMap"/>

            <!-- update serialized items to AVAILABLE (only if this is not a return), which then triggers other SECA chains -->
            <if>
                <condition>
                    <and>
                        <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field="parameters.inventoryItemTypeId"/>
                        <if-empty field="parameters.returnId"/>
                    </and>
                </condition>
                <then>
                    <!-- Retrieve the new inventoryItem -->
                    <entity-one entity-name="InventoryItem" value-field="inventoryItem"/>

                    <!-- Don't reset the status if it's already set to INV_PROMISED or INV_ON_HOLD -->
                    <if>
                        <condition>
                            <and>
                                <if-compare value="INV_PROMISED" operator="not-equals" field="inventoryItem.statusId"/>
                                <if-compare value="INV_ON_HOLD" operator="not-equals" field="inventoryItem.statusId"/>
                            </and>
                        </condition>
                        <then>
                            <clear-field field="serviceInMap"/>
                            <set field="serviceInMap.inventoryItemId" from-field="currentInventoryItemId"/>
                            <set field="serviceInMap.statusId" value="INV_AVAILABLE"/> <!-- XXX set to returned instead -->
                            <call-service service-name="updateInventoryItem" in-map-name="serviceInMap"/>
                        </then>
                    </if>
                </then>
            </if>

            <clear-field field="serviceInMap"/>
            <set-service-fields service-name="balanceInventoryOnIncreaseInATP" map="parameters" to-map="serviceInMap"/>
            <call-service service-name="balanceInventoryOnIncreaseInATP" in-map-name="serviceInMap"/>

        </loop>
        <set field="successMessage" value="Received succesfully."/>
        <!-- return the last inventory item received -->
        <field-to-result field="currentInventoryItemId" result-name="inventoryItemId"/>
    </simple-method>
</simple-methods>